[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "The basics of working on the UNIX command line",
    "section": "",
    "text": "This tutorial covers the basics of navigating in a UNIX-like (e.g., Linux or MacOs) environment. In particular, it covers using the UNIX command line interface, a powerful way to carry out operations on a computer and to automate tasks. Being familiar with operating on the command line will allow you (with some practice and training) to do things more quickly and in a way that can be reproduced later. That’s hard or impossible to do if you are doing point-and-click or drag-and-drop operations in a File Manager or Finder window.\nMaterials for this tutorial, including the Quarto Markdown file that was used to create this document are available on GitHub.\nSoftware Carpentry has a very nice introductory lesson on the basics of the shell. It also has an accompanying YouTube video. Episodes 1-3 (the first 20 minutes) cover the material that is in this tutorial.\n\n\n\n\n\n\nLicense\n\n\n\nThis tutorial by Christopher Paciorek is licensed under a Creative Commons Attribution 3.0 Unported License.\n\n\n\n\n\nOperating on the UNIX command line is also known as “using the terminal” and “using the shell”.\nThe shell is the UNIX program that you interact with when in a terminal window interacting with a UNIX-style operating system (e.g., Linux or MacOS). The shell sits between you and the operating system and provides useful commands and functionality. Basically, the shell is a program that serves to run other commands for you and show you the results. There are actually different shells that you can use, of which bash is very common and is the default on many systems. In recent versions of MacOS, zsh is the default shell. zsh is an extension of bash, so you should be able to use zsh based on this tutorial.\nI’ve generated this document based on using the bash shell on a computer running the Ubuntu Linux version 22.04 operating system, but you should be able to replicate most of the steps in this tutorial in other UNIX command line environments, ideally using the bash or zsh shells.\n\n\n\nHere are some options for accessing a UNIX command line interface:\n\nMacOS: If you’d like to work on your own Mac, you’ll find the Terminal under Applications -&gt; Utilities -&gt; Terminal.\nWindows:\n\nIf you have a sufficiently new version of Windows 10, you can use the Windows Subsystem for Linux, which will provide you with an Ubuntu shell running bash on your own machine.\nIf you have access to remote machines running Linux, you can login to them using programs such as MobaXTerm and Putty. Once logged in, you’ll find yourself in a Terminal window on the remote machine.\n\nJupyterHub: If you have access to a JupyterHub, you will likely be able to start a Terminal session under “New”.\nCloud-based options: You could also try a cloud service such as Google Cloud Shell.\n\n\n\n\n\n\n\nDon’t use Git Bash for this tutorial\n\n\n\nYou probably shouldn’t use Git Bash to follow this tutorial as its functionality is limited.\n\n\nOnce you’re in a Terminal window, you’ll be interacting with the shell and you can enter commands to get information and work with the system. Commands often have optional arguments (flags) that are specified with a minus in front of them, as we’ll see.\n\n\n\nOnce we are in a terminal, we’ll see the “prompt”, which indicates that the shell is waiting for us to enter commands. Sometimes the prompt is just $:\n\n$\n\nbut often it contains information about the username of the current user and the directory on the filesystem that we are in. For example, here a prompt that shows that the current user is ‘scflocal’, on the machine named ‘gandalf’ in the ‘tutorial-unix-basics’ (sub)directory in the user’s home directory (indicated by ~):\n\nscflocal@gandalf:~/tutorial-unix-basics&gt;\n\n\n\n\n\n\n\nTutorial code formatting\n\n\n\nIn the remainder of this tutorial, you won’t see the prompt in front of the commands. All commands will appear in a grey background, with the output (if any) following the code.\n\n\n\n\n\n\n\n\nWhen the shell is waiting for more information\n\n\n\nNote that if you simply see &gt; instead of the usual prompt, that means the shell thinks you haven’t finished entering your command (usually that you haven’t finished entering a string) and is expecting more input from you. If you see a newline but nothing else, the shell probably expects you to enter some text for it to process.\nIf you’re not sure what to do, type Ctrl-c (the control key and ‘c’ at the same time) to get back to the usual prompt.\n\n\nLet’s start by running a command, whoami, that prints out the username of the current user:\n\nwhoami\n\nscflocal",
    "crumbs": [
      "The basics of working on the UNIX command line"
    ]
  },
  {
    "objectID": "index.html#this-tutorial",
    "href": "index.html#this-tutorial",
    "title": "The basics of working on the UNIX command line",
    "section": "",
    "text": "This tutorial covers the basics of navigating in a UNIX-like (e.g., Linux or MacOs) environment. In particular, it covers using the UNIX command line interface, a powerful way to carry out operations on a computer and to automate tasks. Being familiar with operating on the command line will allow you (with some practice and training) to do things more quickly and in a way that can be reproduced later. That’s hard or impossible to do if you are doing point-and-click or drag-and-drop operations in a File Manager or Finder window.\nMaterials for this tutorial, including the Quarto Markdown file that was used to create this document are available on GitHub.\nSoftware Carpentry has a very nice introductory lesson on the basics of the shell. It also has an accompanying YouTube video. Episodes 1-3 (the first 20 minutes) cover the material that is in this tutorial.\n\n\n\n\n\n\nLicense\n\n\n\nThis tutorial by Christopher Paciorek is licensed under a Creative Commons Attribution 3.0 Unported License.",
    "crumbs": [
      "The basics of working on the UNIX command line"
    ]
  },
  {
    "objectID": "index.html#the-shell",
    "href": "index.html#the-shell",
    "title": "The basics of working on the UNIX command line",
    "section": "",
    "text": "Operating on the UNIX command line is also known as “using the terminal” and “using the shell”.\nThe shell is the UNIX program that you interact with when in a terminal window interacting with a UNIX-style operating system (e.g., Linux or MacOS). The shell sits between you and the operating system and provides useful commands and functionality. Basically, the shell is a program that serves to run other commands for you and show you the results. There are actually different shells that you can use, of which bash is very common and is the default on many systems. In recent versions of MacOS, zsh is the default shell. zsh is an extension of bash, so you should be able to use zsh based on this tutorial.\nI’ve generated this document based on using the bash shell on a computer running the Ubuntu Linux version 22.04 operating system, but you should be able to replicate most of the steps in this tutorial in other UNIX command line environments, ideally using the bash or zsh shells.",
    "crumbs": [
      "The basics of working on the UNIX command line"
    ]
  },
  {
    "objectID": "index.html#accessing-a-unix-command-line-interface",
    "href": "index.html#accessing-a-unix-command-line-interface",
    "title": "The basics of working on the UNIX command line",
    "section": "",
    "text": "Here are some options for accessing a UNIX command line interface:\n\nMacOS: If you’d like to work on your own Mac, you’ll find the Terminal under Applications -&gt; Utilities -&gt; Terminal.\nWindows:\n\nIf you have a sufficiently new version of Windows 10, you can use the Windows Subsystem for Linux, which will provide you with an Ubuntu shell running bash on your own machine.\nIf you have access to remote machines running Linux, you can login to them using programs such as MobaXTerm and Putty. Once logged in, you’ll find yourself in a Terminal window on the remote machine.\n\nJupyterHub: If you have access to a JupyterHub, you will likely be able to start a Terminal session under “New”.\nCloud-based options: You could also try a cloud service such as Google Cloud Shell.\n\n\n\n\n\n\n\nDon’t use Git Bash for this tutorial\n\n\n\nYou probably shouldn’t use Git Bash to follow this tutorial as its functionality is limited.\n\n\nOnce you’re in a Terminal window, you’ll be interacting with the shell and you can enter commands to get information and work with the system. Commands often have optional arguments (flags) that are specified with a minus in front of them, as we’ll see.",
    "crumbs": [
      "The basics of working on the UNIX command line"
    ]
  },
  {
    "objectID": "index.html#getting-started",
    "href": "index.html#getting-started",
    "title": "The basics of working on the UNIX command line",
    "section": "",
    "text": "Once we are in a terminal, we’ll see the “prompt”, which indicates that the shell is waiting for us to enter commands. Sometimes the prompt is just $:\n\n$\n\nbut often it contains information about the username of the current user and the directory on the filesystem that we are in. For example, here a prompt that shows that the current user is ‘scflocal’, on the machine named ‘gandalf’ in the ‘tutorial-unix-basics’ (sub)directory in the user’s home directory (indicated by ~):\n\nscflocal@gandalf:~/tutorial-unix-basics&gt;\n\n\n\n\n\n\n\nTutorial code formatting\n\n\n\nIn the remainder of this tutorial, you won’t see the prompt in front of the commands. All commands will appear in a grey background, with the output (if any) following the code.\n\n\n\n\n\n\n\n\nWhen the shell is waiting for more information\n\n\n\nNote that if you simply see &gt; instead of the usual prompt, that means the shell thinks you haven’t finished entering your command (usually that you haven’t finished entering a string) and is expecting more input from you. If you see a newline but nothing else, the shell probably expects you to enter some text for it to process.\nIf you’re not sure what to do, type Ctrl-c (the control key and ‘c’ at the same time) to get back to the usual prompt.\n\n\nLet’s start by running a command, whoami, that prints out the username of the current user:\n\nwhoami\n\nscflocal",
    "crumbs": [
      "The basics of working on the UNIX command line"
    ]
  },
  {
    "objectID": "index.html#moving-around-and-listing-information",
    "href": "index.html#moving-around-and-listing-information",
    "title": "The basics of working on the UNIX command line",
    "section": "3.1 Moving around and listing information",
    "text": "3.1 Moving around and listing information\nWe’ll start by thinking about the filesystem, which organizes our information/data into files on the computer’s disk.\nAnytime you are at the UNIX command line, you have a working directory, which is your current location in the file system.\nHere’s how you can see where you are using the pwd (“print working directory”) command:\n\npwd\n\n/home/scflocal/tutorial-unix-basics\n\n\nand here’s how you use ls to list the files (and subdirectories) in the working directory…\n\nls\n\nassets\n_config.yml\nexample.text\nexample.txt\nfilename with spaces.txt\n_freeze\n_includes\nindex.qmd\nindex.rmarkdown\n_layouts\nmv_assets.sh\nmyfile\nname of my file with spaces.txt\n_quarto.yml\nREADME.md\n_sass\n_site\n\n\nNow suppose I want to be in a different directory so I can see what is there or do things to the files in that directory.\nThe command you need is cd and an important concept you need to become familiar with is the notion of ‘relative’ versus ‘absolute’ path. A path is the set of nested directories that specify a location of interest on the filesystem.\nFirst let’s go to our home directory, which is generally where our files will be. Simply running cd will do that.\n\ncd\npwd\n\n/home/scflocal\n\n\nNow let’s go into a subdirectory. We can use cd with the name of the subdirectory. The subdirectory is found ‘relative’ to our working directory, i.e., found from where we currently are.\n\ncd tutorial-unix-basics\npwd\n\n\n/home/scflocal/tutorial-unix-basics\n\nWe could also navigate through nested subdirectories. For example, after going back to our home directory, let’s go to the assets subdirectory of the tutorial-unix-basics subdirectory. The / is a separate character that distinguishes the nested subdirectories.\n\ncd\ncd tutorial-unix-basics/assets\npwd\n\n/home/scflocal/tutorial-unix-basics/assets\n\n\nYou can access the parent directory of any directory using ..:\n\npwd\ncd ..\npwd\n\n\n/home/scflocal/tutorial-unix-basics/assets /home/scflocal/tutorial-unix-basics\n\nWe can get more complicated in our use of .. with relative paths. Here we’ll go up a directory and then down to a different subdirectory.\n\ncd assets\ncd ../_includes \npwd\n\n/home/scflocal/tutorial-unix-basics/_includes\n\n\nAnd here we’ll go up two directories and then down to another subdirectory.\n\ncd ../../Desktop  # go up two directories and down\npwd\n\n\n/home/scflocal/Desktop\n\nAll of the above examples used relative paths to navigate based on your working directory at the moment you ran the command.\nWe can instead use absolute paths so that it doesn’t matter where we are when we run the command. Specifying an absolute path is done by having your path start with /, such as /home/scflocal. If the path doesn’t start with / then it is interpreted as being a relative path, relative to your working directory. Here we’ll go to the units subdirectory again, but this time using an absolute path.\n\ncd /home/scflocal/tutorial-unix-basics/assets\npwd\n\n/home/scflocal/tutorial-unix-basics/assets\n\n\n\n\n\n\n\n\nAbsolute paths are not robust\n\n\n\nNote that using absolute paths in scripts is generally a bad idea because the script wouldn’t generally work correctly if run on a different machine (which will generally have a different filesystem structure) or as a different user (who will have a different home directory).",
    "crumbs": [
      "The basics of working on the UNIX command line"
    ]
  },
  {
    "objectID": "index.html#the-filesystem",
    "href": "index.html#the-filesystem",
    "title": "The basics of working on the UNIX command line",
    "section": "3.2 The filesystem",
    "text": "3.2 The filesystem\nThe filesystem is basically a upside-down tree.\nFor example, if we just consider the tutorial-unix-basics directory, we can see the tree structure using tree:\n\ntree\n\n.\n├── assets\n│   ├── css\n│   │   └── style.scss\n│   ├── fonts\n│   │   ├── Noto-Sans-700\n│   │   │   ├── Noto-Sans-700.eot\n│   │   │   ├── Noto-Sans-700.svg\n│   │   │   ├── Noto-Sans-700.ttf\n│   │   │   ├── Noto-Sans-700.woff\n│   │   │   └── Noto-Sans-700.woff2\n│   │   ├── Noto-Sans-700italic\n│   │   │   ├── Noto-Sans-700italic.eot\n│   │   │   ├── Noto-Sans-700italic.svg\n│   │   │   ├── Noto-Sans-700italic.ttf\n│   │   │   ├── Noto-Sans-700italic.woff\n│   │   │   └── Noto-Sans-700italic.woff2\n│   │   ├── Noto-Sans-italic\n│   │   │   ├── Noto-Sans-italic.eot\n│   │   │   ├── Noto-Sans-italic.svg\n│   │   │   ├── Noto-Sans-italic.ttf\n│   │   │   ├── Noto-Sans-italic.woff\n│   │   │   └── Noto-Sans-italic.woff2\n│   │   └── Noto-Sans-regular\n│   │       ├── Noto-Sans-regular.eot\n│   │       ├── Noto-Sans-regular.svg\n│   │       ├── Noto-Sans-regular.ttf\n│   │       ├── Noto-Sans-regular.woff\n│   │       └── Noto-Sans-regular.woff2\n│   ├── img\n│   │   ├── logo.svg\n│   │   └── ls_format.png\n│   ├── js\n│   │   └── scale.fix.js\n│   ├── stat_bear.png\n│   └── styles.css\n├── _config.yml\n├── example.text\n├── example.txt\n├── filename with spaces.txt\n├── _freeze\n│   ├── index\n│   │   └── execute-results\n│   │       └── html.json\n│   └── site_libs\n│       └── clipboard\n│           └── clipboard.min.js\n├── _includes\n│   └── toc.html\n├── index.qmd\n├── index.rmarkdown\n├── _layouts\n│   └── default.html\n├── mv_assets.sh\n├── myfile\n├── name of my file with spaces.txt\n├── _quarto.yml\n├── README.md\n├── _sass\n│   ├── fonts.scss\n│   ├── jekyll-theme-minimal.scss\n│   ├── jekyll-theme-minimal.scss.bak\n│   ├── minimal.scss\n│   └── rouge-github.scss\n└── _site\n\n18 directories, 46 files\n\n\nThe dot (.) means “this directory”, so the top of the tree here is the tutorial-unix-basics directory itself, within which there are subdirectories, asset, _includes, _layouts, etc. Then within each of these are files and further subdirectories (as seen in the case of assets, which has subdirectories named css and fonts.)\nIf we consider the entire filesystem, the top, or root of the tree, is the / directory. Within / there are subdirectories, such as /home (which contains users’ home directories where all of the files owned by a user are stored) and /bin (containing UNIX programs, aka ‘binaries’). We’ll use ls again, this time telling it the directory to operate on:\n\nls /\n\naccounts\napp\nbin\nboot\ndev\netc\nhome\nlib\nlib32\nlib64\nlibx32\nlost+found\nmedia\nmirror\nmnt\nopt\npool0\nproc\nroot\nrun\nsbin\nscratch\nserver\nsrv\nswap.img\nsys\nsystem\ntmp\nusr\nvar\n\n\nIf there is a user named scflocal, everything specific to that user would be stored in the user’s home directory. Here that is /home/scflocal, but the exact location may differ on different systems. The shortcut ~scflocal refers to the scflocal home directory, /home/scflocal. If you are the scflocal user, you can also refer to your home directory by the shortcut ~.\n\nls /home\n\nscflocal\nshiny\n\n\n\ncd /home/scflocal\npwd\n\n/home/scflocal\n\n\nGo to the home directory of the current user (which happens to be the scflocal user):\n\ncd ~\npwd\n\n/home/scflocal\n\n\nGo to the home directory of the scflocal user explicitly:\n\ncd ~scflocal\npwd\n\n/home/scflocal\n\n\nAnother useful directory is /tmp, which is a good place to put temporary files that you only need briefly and don’t need to save. These will disappear when a machine is rebooted.\n\ncd /tmp\nls\n\nassets\nassets.tgz\nquarto-session71f9ea197eacbf29\nRtmpMQcgrV\nTemp-76c6318d-4f54-44d2-8bd9-d9a42eeeb7ce\ntest\n\n\nWe can return to the most recent directory we were in like this:\n\ncd -\npwd\n\n\n/home/scflocal",
    "crumbs": [
      "The basics of working on the UNIX command line"
    ]
  },
  {
    "objectID": "index.html#overview",
    "href": "index.html#overview",
    "title": "The basics of working on the UNIX command line",
    "section": "4.1 Overview",
    "text": "4.1 Overview\nLet’s look more at various ways to use commands. We just saw the ls command. Here’s one way we can modify the behavior of the command by passing a command option. Here the -F option (also called a ‘flag’) shows directories by appending / to anything that is a directory (rather than a file) and a * to anything that is an executable (i.e., a program).\n\nls -F\n\nassets/\n_config.yml\nexample.text\nexample.txt\nfilename with spaces.txt\n_freeze/\n_includes/\nindex.qmd\nindex.rmarkdown\n_layouts/\nmv_assets.sh\nmyfile\nname of my file with spaces.txt\n_quarto.yml\nREADME.md\n_sass/\n_site/\n\n\nNext we’ll use multiple options to the ls command. -l shows extended information about files/directories. -t shows files/directories in order of the time at which they were last modified and -r shows in reverse order. Before I run ls, I’ll create an empty file using the touch command. Given this, what file do you expect to be displayed last when you do the following?\n\ntouch myfile\nls -lrt\n\ntotal 112\ndrwxr-xr-x 2 scflocal scflocal  4096 Oct 29 15:17 _sass\ndrwxr-xr-x 2 scflocal scflocal  4096 Oct 29 15:17 _layouts\ndrwxr-xr-x 2 scflocal scflocal  4096 Oct 29 15:17 _includes\n-rw-r--r-- 1 scflocal scflocal   291 Oct 29 15:17 _config.yml\n-rw-r--r-- 1 scflocal scflocal   567 Oct 30 16:35 README.md\n-rw-r--r-- 1 scflocal scflocal     6 Oct 30 16:38 name of my file with spaces.txt\n-rw-r--r-- 1 scflocal scflocal    52 Oct 30 16:45 example.text\n-rw-r--r-- 1 scflocal scflocal    91 Oct 30 17:00 mv_assets.sh\n-rw-r--r-- 1 scflocal scflocal    51 Oct 30 17:03 example.txt\ndrwxr-xr-x 4 scflocal scflocal  4096 Oct 30 17:18 _freeze\ndrwxr-xr-x 6 scflocal scflocal  4096 Oct 31 13:54 assets\n-rw-r--r-- 1 scflocal scflocal   531 Oct 31 14:34 _quarto.yml\n-rw-r--r-- 1 scflocal scflocal    10 Oct 31 14:38 filename with spaces.txt\n-rw-r--r-- 1 scflocal scflocal 26755 Oct 31 14:42 index.qmd\ndrwxr-xr-x 2 scflocal scflocal  4096 Oct 31 14:42 _site\n-rw-r--r-- 1 scflocal scflocal 27079 Oct 31 14:42 index.rmarkdown\n-rw-r--r-- 1 scflocal scflocal     0 Oct 31 14:42 myfile\n\n\nWhile each command has its own syntax, there are some rules usually followed. Generally, executing a command consists of four things:\n\nthe command\ncommand option(s)\nargument(s)\nline acceptance\n\nHere’s an example:\n\nwc -l example.txt\n\n4 example.txt\n\n\nIn the above example, wc is the command, -l is a command option specifying to count the number of lines, example.txt is the argument, and the line acceptance is indicated by hitting the Enter key at the end of the line.\nSo that invocation counts the number of lines in the file named example.txt.\nThe spaces are required and distinguish the different parts of the invocation. For this reason, it’s generally a bad idea to have spaces within file names on a UNIX system. But if you do, you can use quotation marks to distinguish the file name, e.g.,\n\necho \"some text\" &gt; \"filename with spaces.txt\"\nls -l \"filename with spaces.txt\"\n\n-rw-r--r-- 1 scflocal scflocal 10 Oct 31 14:42 filename with spaces.txt\n\n\nAlso, capitalization matters. For example -l and -L are different options.\nNote that options, arguments, or both might not be included in some cases. Recall that we’ve used ls without either options or arguments.\nArguments are usually one or more files or directories.",
    "crumbs": [
      "The basics of working on the UNIX command line"
    ]
  },
  {
    "objectID": "index.html#options",
    "href": "index.html#options",
    "title": "The basics of working on the UNIX command line",
    "section": "4.2 Options",
    "text": "4.2 Options\nOften we can specify an option either in short form (as with -l here) or long form (--lines here), as seen in the following equivalent invocations:\n\nwc -l example.txt\nwc --lines example.txt\n\n4 example.txt\n4 example.txt\n\n\nWe can also ask for the number of characters with the -m option, which can be combined with the -l option equivalently in two ways:\n\nwc -lm example.txt\nwc -l -m example.txt\n\n 4 51 example.txt\n 4 51 example.txt\n\n\nOptions will often take values, e.g., if we want to get the first two lines of the file, the following invocations are equivalent:\n\nhead -n 2 example.txt\nhead --lines=2 example.txt\nhead --lines 2 example.txt\n\nHello there.\nThis is a file\nHello there.\nThis is a file\nHello there.\nThis is a file",
    "crumbs": [
      "The basics of working on the UNIX command line"
    ]
  },
  {
    "objectID": "index.html#comments",
    "href": "index.html#comments",
    "title": "The basics of working on the UNIX command line",
    "section": "4.3 Comments",
    "text": "4.3 Comments\nAnything that follows # is a comment and is ignored.\n\n# This is ignored\nls  # Everything after the # is ignored\n\nassets\n_config.yml\nexample.text\nexample.txt\nfilename with spaces.txt\n_freeze\n_includes\nindex.qmd\nindex.rmarkdown\n_layouts\nmv_assets.sh\nmyfile\nname of my file with spaces.txt\n_quarto.yml\nREADME.md\n_sass\n_site",
    "crumbs": [
      "The basics of working on the UNIX command line"
    ]
  },
  {
    "objectID": "index.html#getting-help-with-unix-commands",
    "href": "index.html#getting-help-with-unix-commands",
    "title": "The basics of working on the UNIX command line",
    "section": "4.4 Getting help with UNIX commands",
    "text": "4.4 Getting help with UNIX commands\nEssentially all UNIX commands have help information (called a man page), accessed using man. We won’t show the results here as they are rather long.\n\nman ls\n\nYou should try it yourself to practice viewing man pages. Once you are in the man page, you can navigate by hitting the space bar (to scroll down) and the up and down arrows. You can search by typing /, typing the string you want to search for and hitting &lt;Enter&gt;. You can use n and p for the next and previous search hits and q to quit out of the search.\nUnfortunately man pages are often quite long, hard to understand, and without examples. But the information you need is usually there if you take the time to look for it.\nAlso, UNIX commands as well as other programs run from the command line often provide help information via the --help option:\n\nls --help\n\nAgain, we’re not showing the output as it is rather long.",
    "crumbs": [
      "The basics of working on the UNIX command line"
    ]
  },
  {
    "objectID": "index.html#seeing-if-a-command-or-program-is-available",
    "href": "index.html#seeing-if-a-command-or-program-is-available",
    "title": "The basics of working on the UNIX command line",
    "section": "4.5 Seeing if a command or program is available",
    "text": "4.5 Seeing if a command or program is available\nYou can see if a command or program is installed (and where it is installed) using type.\n\ntype grep\ntype R\ntype python\n\ngrep is /usr/bin/grep\nR is /usr/bin/R\npython is /usr/local/linux/miniforge-3.12/bin/python",
    "crumbs": [
      "The basics of working on the UNIX command line"
    ]
  },
  {
    "objectID": "index.html#copying-and-removing-files",
    "href": "index.html#copying-and-removing-files",
    "title": "The basics of working on the UNIX command line",
    "section": "5.1 Copying and removing files",
    "text": "5.1 Copying and removing files\nYou’ll often want to make a copy of a file, move it between directories, or remove it.\n\ncp \ncp example.txt example-new.txt\nmv example-new.txt /tmp/.\ncd /tmp\nls -lrt\n\ncp: missing file operand\nTry 'cp --help' for more information.\ntotal 468\ndrwx------  2 scflocal scflocal   4096 Oct 29 15:21 Temp-76c6318d-4f54-44d2-8bd9-d9a42eeeb7ce\ndrwxr-xr-x  6 scflocal scflocal   4096 Oct 31 13:54 assets\ndrwxr-xr-x  2 scflocal scflocal   4096 Oct 31 14:38 test\n-rw-r--r--  1 scflocal scflocal 453183 Oct 31 14:38 assets.tgz\ndrwx------ 37 scflocal scflocal   4096 Oct 31 14:42 quarto-session71f9ea197eacbf29\ndrwx------  2 scflocal scflocal   4096 Oct 31 14:42 RtmpMQcgrV\n-rw-r--r--  1 scflocal scflocal     51 Oct 31 14:42 example-new.txt\n\n\nWhen we moved the file, the use of /. in /tmp/. indicates we want to use the same name as the original file.\n\ncd /tmp\nrm example-new.txt\nls -lrt\n\ntotal 464\ndrwx------  2 scflocal scflocal   4096 Oct 29 15:21 Temp-76c6318d-4f54-44d2-8bd9-d9a42eeeb7ce\ndrwxr-xr-x  6 scflocal scflocal   4096 Oct 31 13:54 assets\ndrwxr-xr-x  2 scflocal scflocal   4096 Oct 31 14:38 test\n-rw-r--r--  1 scflocal scflocal 453183 Oct 31 14:38 assets.tgz\ndrwx------ 37 scflocal scflocal   4096 Oct 31 14:42 quarto-session71f9ea197eacbf29\ndrwx------  2 scflocal scflocal   4096 Oct 31 14:42 RtmpMQcgrV\n\n\n\n\n\n\n\n\nrm is forever\n\n\n\nI used rm above to remove the file. Be very careful about removing files - there is no Trash folder in UNIX - once a file is removed, it’s gone for good.\n\n\nThe mv command is also used if you want to rename a file.\n\ncd ~/tutorial-unix-basics\nmv example.txt silly_example.txt\nls\n\nassets\n_config.yml\nexample.text\nfilename with spaces.txt\n_freeze\n_includes\nindex.qmd\nindex.rmarkdown\n_layouts\nmv_assets.sh\nmyfile\nname of my file with spaces.txt\n_quarto.yml\nREADME.md\n_sass\nsilly_example.txt\n_site\n\n\nWe can copy and remove entire directories. The -p flag preserves the time stamp and other information associated with the files/directories, while the -r option copies recursively, such that the directory and all its contents (all child files and directories) are also copied.\n\ncp -pr assets /tmp/.  # Copy the assets directory into /tmp.\ncd /tmp\nmkdir test\nmv assets test     # Move the assets directory into the test directory.\nls -l test/assets\n\nmkdir: cannot create directory ‘test’: File exists\ntotal 112\ndrwxr-xr-x 2 scflocal scflocal  4096 Oct 29 15:17 css\ndrwxr-xr-x 6 scflocal scflocal  4096 Oct 29 15:17 fonts\ndrwxr-xr-x 2 scflocal scflocal  4096 Oct 29 15:17 img\ndrwxr-xr-x 2 scflocal scflocal  4096 Oct 29 15:17 js\n-rw-r--r-- 1 scflocal scflocal 92106 Oct 30 17:10 stat_bear.png\n-rw-r--r-- 1 scflocal scflocal    69 Oct 31 13:54 styles.css\n\n\n\nrm -rf /tmp/test/assets   # Remove the ps directory and anything contained within it.\nls /tmp/test              # This should be empty now.\n\nYou can use a variant of cp named scp to copy files between different UNIX-like machines. Suppose I have access to the machine radagast.berkeley.edu and that my user name on that machine is scf1. I can copy a file to that machine or from that machine as follows.\n(Note that I am not running the code in the process of generating this document.)\n\ncd ~/tutorial-unix-basics\n\n# FROM the machine you're on TO another machine\n# Copy the file to the Desktop subdirectory of the scf1 home directory on the remote machine\nscp example.txt username@machinename.berkeley.edu:~/Desktop/.\n\n# FROM another machine TO the machine you're on\n# Copy a file from the /tmp directory of the remote machine to a specific directory on this machine\nscp username@machinename.berkeley.edu:/tmp/data.txt ~/Downloads/.",
    "crumbs": [
      "The basics of working on the UNIX command line"
    ]
  },
  {
    "objectID": "index.html#file-names-and-extensions",
    "href": "index.html#file-names-and-extensions",
    "title": "The basics of working on the UNIX command line",
    "section": "5.2 File names and extensions",
    "text": "5.2 File names and extensions\nThe format a file is in is determined by the actual content of the file. You can determine the file format using file:\n\nfile index.qmd\nfile /usr/local/linux/miniforge-3.12/lib/python3.12/site-packages/numpy/dtypes.py\n\nindex.qmd: exported SGML document, ASCII text, with very long lines (615)\n/usr/local/linux/miniforge-3.12/lib/python3.12/site-packages/numpy/dtypes.py: Python script, ASCII text executable\n\n\nIn many cases, files have extensions such as .csv (for comma-separated text files), .pdf for PDFs, .jpg for JPEG files. The extension is a convention that helps us and programs distinguish different kinds of files and therefore know how to manipulate/interpret the files.\n\n\n\n\n\n\nFilename extensions don’t determine the file type\n\n\n\n\n\nThe extension is just a convention – changing the file name doesn’t change the file format!\nSo if make a copy of the example.txt file but name it example.pdf, we see that it’s still just a simple text file even if I give it a name that would suggest it’s a PDF.\n\ncp silly_example.txt silly_example.pdf\ncat silly_example.pdf\n\nHello there.\nThis is a file\nthat contains\n4 lines.\n\n\n\nfile silly_example.pdf\n\nsilly_example.pdf: ASCII text\n\n\nHowever, changing the extension may prevent a program from using the file simply because the program was written to assume that files in a certain format have a certain extension.",
    "crumbs": [
      "The basics of working on the UNIX command line"
    ]
  },
  {
    "objectID": "index.html#compressing-and-uncompressing-files",
    "href": "index.html#compressing-and-uncompressing-files",
    "title": "The basics of working on the UNIX command line",
    "section": "6.1 Compressing and uncompressing files",
    "text": "6.1 Compressing and uncompressing files\nThe zip utility compresses in a format compatible with zip files for Windows:\n\nzip -r assets.zip assets\n\n  adding: assets/ (stored 0%)\n  adding: assets/css/ (stored 0%)\n  adding: assets/css/style.scss (stored 0%)\n  adding: assets/js/ (stored 0%)\n  adding: assets/js/scale.fix.js (deflated 62%)\n  adding: assets/fonts/ (stored 0%)\n  adding: assets/fonts/Noto-Sans-regular/ (stored 0%)\n  adding: assets/fonts/Noto-Sans-regular/Noto-Sans-regular.ttf (deflated 34%)\n  adding: assets/fonts/Noto-Sans-regular/Noto-Sans-regular.svg (deflated 66%)\n  adding: assets/fonts/Noto-Sans-regular/Noto-Sans-regular.woff2 (stored 0%)\n  adding: assets/fonts/Noto-Sans-regular/Noto-Sans-regular.eot (deflated 0%)\n  adding: assets/fonts/Noto-Sans-regular/Noto-Sans-regular.woff (deflated 1%)\n  adding: assets/fonts/Noto-Sans-700italic/ (stored 0%)\n  adding: assets/fonts/Noto-Sans-700italic/Noto-Sans-700italic.ttf (deflated 32%)\n  adding: assets/fonts/Noto-Sans-700italic/Noto-Sans-700italic.woff2 (stored 0%)\n  adding: assets/fonts/Noto-Sans-700italic/Noto-Sans-700italic.eot (deflated 0%)\n  adding: assets/fonts/Noto-Sans-700italic/Noto-Sans-700italic.woff (deflated 1%)\n  adding: assets/fonts/Noto-Sans-700italic/Noto-Sans-700italic.svg (deflated 68%)\n  adding: assets/fonts/Noto-Sans-700/ (stored 0%)\n  adding: assets/fonts/Noto-Sans-700/Noto-Sans-700.ttf (deflated 35%)\n  adding: assets/fonts/Noto-Sans-700/Noto-Sans-700.eot (deflated 0%)\n  adding: assets/fonts/Noto-Sans-700/Noto-Sans-700.svg (deflated 66%)\n  adding: assets/fonts/Noto-Sans-700/Noto-Sans-700.woff2 (stored 0%)\n  adding: assets/fonts/Noto-Sans-700/Noto-Sans-700.woff (deflated 1%)\n  adding: assets/fonts/Noto-Sans-italic/ (stored 0%)\n  adding: assets/fonts/Noto-Sans-italic/Noto-Sans-italic.svg (deflated 67%)\n  adding: assets/fonts/Noto-Sans-italic/Noto-Sans-italic.woff2 (stored 0%)\n  adding: assets/fonts/Noto-Sans-italic/Noto-Sans-italic.eot (deflated 0%)\n  adding: assets/fonts/Noto-Sans-italic/Noto-Sans-italic.ttf (deflated 31%)\n  adding: assets/fonts/Noto-Sans-italic/Noto-Sans-italic.woff (deflated 1%)\n  adding: assets/stat_bear.png (deflated 18%)\n  adding: assets/img/ (stored 0%)\n  adding: assets/img/logo.svg (deflated 70%)\n  adding: assets/img/ls_format.png (deflated 4%)\n  adding: assets/styles.css (deflated 4%)\n\n\n\nls -l assets.zip\n\n-rw-r--r-- 1 scflocal scflocal 444635 Oct 31 14:42 assets.zip\n\n\ngzip is a standard UNIX compression utility to compress individual files:\n\ncp assets/img/ls_format.png test.png\nls -l test.png\n\n-rw-r--r-- 1 scflocal scflocal 52402 Oct 31 14:42 test.png\n\n\nHere we see that gzip can’t compress the png file much, but it can help a lot with other formats.\n\ngzip test.png\nls -l test.png.gz   # Not much smaller than the uncompressed file.\n\n-rw-r--r-- 1 scflocal scflocal 50200 Oct 31 14:42 test.png.gz\n\n\nFinally, the tar utility will combine multiple files and directories into a single archive.\n\ntar -cvf assets.tar assets\n\nassets/\nassets/css/\nassets/css/style.scss\nassets/js/\nassets/js/scale.fix.js\nassets/fonts/\nassets/fonts/Noto-Sans-regular/\nassets/fonts/Noto-Sans-regular/Noto-Sans-regular.ttf\nassets/fonts/Noto-Sans-regular/Noto-Sans-regular.svg\nassets/fonts/Noto-Sans-regular/Noto-Sans-regular.woff2\nassets/fonts/Noto-Sans-regular/Noto-Sans-regular.eot\nassets/fonts/Noto-Sans-regular/Noto-Sans-regular.woff\nassets/fonts/Noto-Sans-700italic/\nassets/fonts/Noto-Sans-700italic/Noto-Sans-700italic.ttf\nassets/fonts/Noto-Sans-700italic/Noto-Sans-700italic.woff2\nassets/fonts/Noto-Sans-700italic/Noto-Sans-700italic.eot\nassets/fonts/Noto-Sans-700italic/Noto-Sans-700italic.woff\nassets/fonts/Noto-Sans-700italic/Noto-Sans-700italic.svg\nassets/fonts/Noto-Sans-700/\nassets/fonts/Noto-Sans-700/Noto-Sans-700.ttf\nassets/fonts/Noto-Sans-700/Noto-Sans-700.eot\nassets/fonts/Noto-Sans-700/Noto-Sans-700.svg\nassets/fonts/Noto-Sans-700/Noto-Sans-700.woff2\nassets/fonts/Noto-Sans-700/Noto-Sans-700.woff\nassets/fonts/Noto-Sans-italic/\nassets/fonts/Noto-Sans-italic/Noto-Sans-italic.svg\nassets/fonts/Noto-Sans-italic/Noto-Sans-italic.woff2\nassets/fonts/Noto-Sans-italic/Noto-Sans-italic.eot\nassets/fonts/Noto-Sans-italic/Noto-Sans-italic.ttf\nassets/fonts/Noto-Sans-italic/Noto-Sans-italic.woff\nassets/stat_bear.png\nassets/img/\nassets/img/logo.svg\nassets/img/ls_format.png\nassets/styles.css\n\n\n\nls -l assets.tar\n\n-rw-r--r-- 1 scflocal scflocal 686080 Oct 31 14:42 assets.tar\n\n\nAdding the -z flag also gzips the result. In that case there was more noticeable compression.\n\ntar -cvzf assets.tgz assets\n\nassets/\nassets/css/\nassets/css/style.scss\nassets/js/\nassets/js/scale.fix.js\nassets/fonts/\nassets/fonts/Noto-Sans-regular/\nassets/fonts/Noto-Sans-regular/Noto-Sans-regular.ttf\nassets/fonts/Noto-Sans-regular/Noto-Sans-regular.svg\nassets/fonts/Noto-Sans-regular/Noto-Sans-regular.woff2\nassets/fonts/Noto-Sans-regular/Noto-Sans-regular.eot\nassets/fonts/Noto-Sans-regular/Noto-Sans-regular.woff\nassets/fonts/Noto-Sans-700italic/\nassets/fonts/Noto-Sans-700italic/Noto-Sans-700italic.ttf\nassets/fonts/Noto-Sans-700italic/Noto-Sans-700italic.woff2\nassets/fonts/Noto-Sans-700italic/Noto-Sans-700italic.eot\nassets/fonts/Noto-Sans-700italic/Noto-Sans-700italic.woff\nassets/fonts/Noto-Sans-700italic/Noto-Sans-700italic.svg\nassets/fonts/Noto-Sans-700/\nassets/fonts/Noto-Sans-700/Noto-Sans-700.ttf\nassets/fonts/Noto-Sans-700/Noto-Sans-700.eot\nassets/fonts/Noto-Sans-700/Noto-Sans-700.svg\nassets/fonts/Noto-Sans-700/Noto-Sans-700.woff2\nassets/fonts/Noto-Sans-700/Noto-Sans-700.woff\nassets/fonts/Noto-Sans-italic/\nassets/fonts/Noto-Sans-italic/Noto-Sans-italic.svg\nassets/fonts/Noto-Sans-italic/Noto-Sans-italic.woff2\nassets/fonts/Noto-Sans-italic/Noto-Sans-italic.eot\nassets/fonts/Noto-Sans-italic/Noto-Sans-italic.ttf\nassets/fonts/Noto-Sans-italic/Noto-Sans-italic.woff\nassets/stat_bear.png\nassets/img/\nassets/img/logo.svg\nassets/img/ls_format.png\nassets/styles.css\n\n\n\nls -l assets.tgz\n\n-rw-r--r-- 1 scflocal scflocal 453183 Oct 31 14:42 assets.tgz\n\n\nNow let’s move that tarball (as it is called) to a new directory and unzip and expand it using the -x flag.\n\nmv assets.tgz /tmp\ncd /tmp\ntar -xvzf assets.tgz\n\nassets/\nassets/css/\nassets/css/style.scss\nassets/js/\nassets/js/scale.fix.js\nassets/fonts/\nassets/fonts/Noto-Sans-regular/\nassets/fonts/Noto-Sans-regular/Noto-Sans-regular.ttf\nassets/fonts/Noto-Sans-regular/Noto-Sans-regular.svg\nassets/fonts/Noto-Sans-regular/Noto-Sans-regular.woff2\nassets/fonts/Noto-Sans-regular/Noto-Sans-regular.eot\nassets/fonts/Noto-Sans-regular/Noto-Sans-regular.woff\nassets/fonts/Noto-Sans-700italic/\nassets/fonts/Noto-Sans-700italic/Noto-Sans-700italic.ttf\nassets/fonts/Noto-Sans-700italic/Noto-Sans-700italic.woff2\nassets/fonts/Noto-Sans-700italic/Noto-Sans-700italic.eot\nassets/fonts/Noto-Sans-700italic/Noto-Sans-700italic.woff\nassets/fonts/Noto-Sans-700italic/Noto-Sans-700italic.svg\nassets/fonts/Noto-Sans-700/\nassets/fonts/Noto-Sans-700/Noto-Sans-700.ttf\nassets/fonts/Noto-Sans-700/Noto-Sans-700.eot\nassets/fonts/Noto-Sans-700/Noto-Sans-700.svg\nassets/fonts/Noto-Sans-700/Noto-Sans-700.woff2\nassets/fonts/Noto-Sans-700/Noto-Sans-700.woff\nassets/fonts/Noto-Sans-italic/\nassets/fonts/Noto-Sans-italic/Noto-Sans-italic.svg\nassets/fonts/Noto-Sans-italic/Noto-Sans-italic.woff2\nassets/fonts/Noto-Sans-italic/Noto-Sans-italic.eot\nassets/fonts/Noto-Sans-italic/Noto-Sans-italic.ttf\nassets/fonts/Noto-Sans-italic/Noto-Sans-italic.woff\nassets/stat_bear.png\nassets/img/\nassets/img/logo.svg\nassets/img/ls_format.png\nassets/styles.css\n\n\nYou can see the whole directory structure of what was archived has been recovered in the new location:\n\nls -l /tmp/assets\n\ntotal 112\ndrwxr-xr-x 2 scflocal scflocal  4096 Oct 29 15:17 css\ndrwxr-xr-x 6 scflocal scflocal  4096 Oct 29 15:17 fonts\ndrwxr-xr-x 2 scflocal scflocal  4096 Oct 29 15:17 img\ndrwxr-xr-x 2 scflocal scflocal  4096 Oct 29 15:17 js\n-rw-r--r-- 1 scflocal scflocal 92106 Oct 30 17:10 stat_bear.png\n-rw-r--r-- 1 scflocal scflocal    69 Oct 31 13:54 styles.css",
    "crumbs": [
      "The basics of working on the UNIX command line"
    ]
  },
  {
    "objectID": "index.html#disk-usage",
    "href": "index.html#disk-usage",
    "title": "The basics of working on the UNIX command line",
    "section": "6.2 Disk usage",
    "text": "6.2 Disk usage\nYou can can see how much disk space is being used versus available as follows. The ‘Mounted on’ column will generally identify the parts of the filesystem in a more user-friendly way than the ‘Filesystem’ column.\n\ndf -h\n\nFilesystem                       Size  Used Avail Use% Mounted on\n/dev/sda2                         59G   32G   25G  57% /\ntmpfs                             63G   68M   63G   1% /dev/shm\ntmpfs                             13G   23M   13G   1% /run\ntmpfs                            5.0M     0  5.0M   0% /run/lock\ntmpfs                             13G   28K   13G   1% /run/user/3173\ntmpfs                             13G   28K   13G   1% /run/user/3520\ntmpfs                             13G   28K   13G   1% /run/user/3417\ntmpfs                             13G   28K   13G   1% /run/user/764\ntmpfs                             13G   28K   13G   1% /run/user/3023\ntmpfs                             13G   28K   13G   1% /run/user/3565\ntmpfs                             13G   28K   13G   1% /run/user/3530\ntmpfs                             13G   28K   13G   1% /run/user/3294\ntmpfs                             13G   28K   13G   1% /run/user/3066\ntmpfs                             13G   28K   13G   1% /run/user/3180\ntmpfs                             13G   40K   13G   1% /run/user/3189\ntmpfs                             13G   28K   13G   1% /run/user/3188\ntmpfs                             13G   32K   13G   1% /run/user/3605\ntmpfs                             13G   28K   13G   1% /run/user/3608\ntmpfs                             13G   32K   13G   1% /run/user/3466\ntmpfs                             13G   28K   13G   1% /run/user/3604\ntmpfs                             13G   28K   13G   1% /run/user/3218\ntmpfs                             13G   32K   13G   1% /run/user/3624\ntmpfs                            4.0M     0  4.0M   0% /sys/fs/cgroup\n/dev/sda3                         59G   34G   22G  61% /var\n/dev/sda4                        472G  2.7G  445G   1% /var/tmp\n/dev/sda5                        1.3T   76G  1.1T   7% /tmp\noz.berkeley.edu:/pool0/system    6.0T  4.8T  1.3T  80% /system\noz.berkeley.edu:/pool0/scratch    37T   33T  4.3T  89% /scratch\noz.berkeley.edu:/pool0/accounts   66T   20T   47T  30% /accounts\n\n\nIn general, you’ll want to look at the ‘/’ line under Mounted on, and on standard UNIX machines possibly at ‘/tmp’, ‘/home’, and others.\nWe can see usage in specific directories like this:\n\ncd assets\ndu -h\n\n8.0K    ./css\n8.0K    ./js\n140K    ./fonts/Noto-Sans-regular\n140K    ./fonts/Noto-Sans-700italic\n140K    ./fonts/Noto-Sans-700\n132K    ./fonts/Noto-Sans-italic\n556K    ./fonts\n76K ./img\n748K    .\n\n\nHere we see that the total usage is about a bit less than 700 KB, with, for example, about 70 KB of that in the img subdirectory.\nIf we only want a summary of usage for each top-level subdirectory, rather than showing all nested subdirectories:\n\ncd ~/tutorial-unix-basics\ndu -h -d 1\n\n28K ./_sass\n8.0K    ./_layouts\n4.0K    ./_site\n16K ./_includes\n84K ./_freeze\n748K    ./assets\n1.5M    ./.git\n172K    ./.quarto\n3.8M    .",
    "crumbs": [
      "The basics of working on the UNIX command line"
    ]
  },
  {
    "objectID": "index.html#machine-information",
    "href": "index.html#machine-information",
    "title": "The basics of working on the UNIX command line",
    "section": "6.3 Machine information",
    "text": "6.3 Machine information\nLinux machines (but not Macs) have system information provided in a few special files.\n/proc/cpuinfo shows information on each processor.\n\nhead -n 30 /proc/cpuinfo\n\nprocessor   : 0\nvendor_id   : GenuineIntel\ncpu family  : 6\nmodel       : 45\nmodel name  : Intel(R) Xeon(R) CPU E5-2609 0 @ 2.40GHz\nstepping    : 7\nmicrocode   : 0x71a\ncpu MHz     : 2394.053\ncache size  : 10240 KB\nphysical id : 0\nsiblings    : 4\ncore id     : 0\ncpu cores   : 4\napicid      : 0\ninitial apicid  : 0\nfpu     : yes\nfpu_exception   : yes\ncpuid level : 13\nwp      : yes\nflags       : fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc cpuid aperfmperf pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm epb pti ssbd ibrs ibpb stibp tpr_shadow vnmi flexpriority ept vpid xsaveopt dtherm arat pln pts md_clear flush_l1d\nvmx flags   : vnmi preemption_timer invvpid ept_x_only ept_1gb flexpriority tsc_offset vtpr mtf vapic ept vpid unrestricted_guest ple\nbugs        : cpu_meltdown spectre_v1 spectre_v2 spec_store_bypass l1tf mds swapgs itlb_multihit mmio_unknown\nbogomips    : 4800.18\nclflush size    : 64\ncache_alignment : 64\naddress sizes   : 46 bits physical, 48 bits virtual\npower management:\n\nprocessor   : 1\nvendor_id   : GenuineIntel\n\n\nThis indicates there are at least two processors – numbered 0 and 1 (we’d need to see the whole file to see if there are more). Each is an Intel Core i7.\nThis file has information on the memory available:\n\nhead -n 10 /proc/meminfo\n\nMemTotal:       131966464 kB\nMemFree:        22645656 kB\nMemAvailable:   98414788 kB\nBuffers:          588304 kB\nCached:         32359372 kB\nSwapCached:      1249372 kB\nActive:         28592240 kB\nInactive:       32685712 kB\nActive(anon):    3933376 kB\nInactive(anon): 24488076 kB\n\n\nThe key line is the MemTotal line, indicating 132 GB of RAM.\n\ncat /etc/issue\n\nUbuntu 22.04.1 LTS \\n \\l\n\n\nWe’re running Ubuntu version 22.04.\nWe can also use commands to get information:\n\nnproc  # how many processors?\n\n8",
    "crumbs": [
      "The basics of working on the UNIX command line"
    ]
  },
  {
    "objectID": "index.html#tab-completion",
    "href": "index.html#tab-completion",
    "title": "The basics of working on the UNIX command line",
    "section": "7.1 Tab completion",
    "text": "7.1 Tab completion\nThe shell will try to auto-complete the names of commands/programs or of files when you type part of the name and then hit &lt;Tab&gt;. This can save quite a bit of typing, particularly for long file names.",
    "crumbs": [
      "The basics of working on the UNIX command line"
    ]
  },
  {
    "objectID": "index.html#keyboard-shortcuts",
    "href": "index.html#keyboard-shortcuts",
    "title": "The basics of working on the UNIX command line",
    "section": "7.2 Keyboard shortcuts",
    "text": "7.2 Keyboard shortcuts\nYou can navigate within a line using the usual arrows but also:\n\nCtrl-a moves to the beginning of the line\nCtrl-e moves to the end of the line\nCtrl-k deletes the rest of the line starting at the cursor\nCtrl-y pastes in whatever was deleted previously with Ctrl-k\nCtrl-r enables an interactive history search",
    "crumbs": [
      "The basics of working on the UNIX command line"
    ]
  },
  {
    "objectID": "index.html#command-history",
    "href": "index.html#command-history",
    "title": "The basics of working on the UNIX command line",
    "section": "7.3 Command history",
    "text": "7.3 Command history\nThe up and down arrow keys will move you through the history of commands you have entered in the terminal. So you can recover something you typed previously and then directly run it again, or edit it and then run the modified version. You run the command by pressing &lt;Enter&gt;, which you can do regardless of where your cursor currently is on the line you are editing.\nThere’s also lots more functionality along these lines that we won’t go into here.",
    "crumbs": [
      "The basics of working on the UNIX command line"
    ]
  },
  {
    "objectID": "index.html#saving-your-code-as-a-shell-script",
    "href": "index.html#saving-your-code-as-a-shell-script",
    "title": "The basics of working on the UNIX command line",
    "section": "7.4 Saving your code as a shell script",
    "text": "7.4 Saving your code as a shell script\nOften (particularly as you learn more sophisticated shell functionality) you will want to save your shell syntax in the form of a code file, called a script, that you could run another time.\nFor example, suppose you often need to do the following series of steps:\n\ncd \ntar -cvzf assets.tgz assets\nmv assets.tgz /tmp\ncd /tmp\ntar -xvzf assets.tgz\n\nYou can put those lines into a file, say, mv_assets.sh, which will generally end in .sh.\nThen we can run the code in the file as follows. (Results not shown here.)\n\nchmod ugo+x mv_assets.sh  # Make the script executable by everyone.\n./mv_assets.sh            # Run it.\n\nThe initial ./ is needed because UNIX is not expecting there to be an executable file in this particular directory.\nYou’ll generally want to have the first line of your shell scripts indicate the shell to be used to execute the script, so you’d want to put #!/bin/bash as the first line of mv_assets.sh.",
    "crumbs": [
      "The basics of working on the UNIX command line"
    ]
  }
]